name: CI/CD Pipeline

on:
  workflow_dispatch:
    inputs:
      target_environment:
        description: 'Environment to deploy to'
        required: true
        default: 'staging'
        type: choice
        options:
        - production
      skip_testing:
        description: 'Skip running tests'
        required: false
        default: false
        type: boolean
      skip_build:
        description: 'Skip building Docker images'
        required: false
        default: false
        type: boolean

jobs:
  test-backend:
    runs-on: ubuntu-latest
    if: ${{ !inputs.skip_testing }}
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
    
    - name: Install Yarn
      run: npm install -g yarn
    
    - name: Install backend dependencies
      working-directory: ./backend
      run: yarn install --frozen-lockfile
    
    - name: Run backend unit tests
      working-directory: ./backend
      run: yarn test --testPathIgnorePatterns=test/
    
    - name: Build backend
      working-directory: ./backend
      run: yarn build

  test-frontend:
    runs-on: ubuntu-latest
    if: ${{ !inputs.skip_testing }}
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'

    - name: Install Yarn
      run: npm install -g yarn
    
    - name: Install frontend dependencies
      working-directory: ./frontend
      run: yarn install --frozen-lockfile
    
    - name: Build frontend
      working-directory: ./frontend
      run: yarn run test

  build-and-deploy:
    needs: [test-backend, test-frontend]
    runs-on: ubuntu-latest
    if: ${{ !inputs.skip_build }}
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Build backend Docker image
      run: docker build -t real-time-bid-backend ./backend
    
    - name: Build frontend Docker image
      run: docker build -t real-time-bid-frontend ./frontend
    
    - name: Run Docker Compose
      run: docker compose up -d --build

  deploy-backend:
    needs: [build-and-deploy]
    runs-on: ubuntu-latest
    if: ${{ inputs.target_environment == 'production' }}
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Deploy to Render
      uses: johnbeynon/render-deploy-action@v0.0.8
      with:
        service-id: ${{ secrets.RENDER_SERVICE_ID }}
        api-key: ${{ secrets.RENDER_API_KEY }}
        wait-for-success: true

  deploy-frontend:
    needs: [build-and-deploy]
    runs-on: ubuntu-latest
    if: ${{ inputs.target_environment == 'production' }}
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Deploy to Vercel
      uses: amondnet/vercel-action@v25
      with:
        vercel-token: ${{ secrets.VERCEL_TOKEN }}
        vercel-org-id: ${{ secrets.VERCEL_ORG_ID }}
        vercel-project-id: ${{ secrets.VERCEL_PROJECT_ID }}